from datetime import datetime
from typing import List, Optional

import arrow
from cyclonedx.model import XsUri
from cyclonedx.model.component import Component
from cyclonedx.model.vulnerability import (
    BomTarget,
    Vulnerability,
    VulnerabilityReference,
    VulnerabilitySource,
)

from .exceptions import OSVQueryException
from .osv import OSV
from .osv.schemas import Vuln


def to_datetime(s: str) -> datetime:
    arrw = arrow.get(s)
    return arrw.datetime


class VulnerabilityFactory:
    @staticmethod
    def from_osv_vuln(vuln: Vuln) -> Vulnerability:
        references: List[VulnerabilityReference] = []
        for ref in vuln.references:
            source: Optional[VulnerabilitySource] = None
            if ref.url is not None:
                source = VulnerabilitySource(url=XsUri(ref.url))

            if source is not None:
                references.append(VulnerabilityReference(source=source))

        return Vulnerability(
            id=vuln.id,
            detail=vuln.details,
            updated=to_datetime(vuln.modified),
            published=to_datetime(vuln.published),
        )

    @staticmethod
    def from_component(component: Component) -> List[Vulnerability]:
        if component.version is None:
            return []

        vulnerabilities: List[Vulnerability] = []

        try:
            osv = OSV()
            res = osv.query(name=component.name, version=component.version)
        except OSVQueryException:
            return vulnerabilities

        for vuln in res.vulns:
            vulnerability = VulnerabilityFactory.from_osv_vuln(vuln)
            vulnerability.affects = [BomTarget(ref=component.bom_ref.value)]
            vulnerabilities.append(vulnerability)

        return vulnerabilities
